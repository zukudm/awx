- name: Install minikube
  hosts: "{{ host }}"
  vars_files: 
    - vars/vars.yml

  roles:
    - role:  gantsign.minikube

  pre_tasks:
  
  - name: Install docker
    include_tasks: "playbooks/install-docker.yml"


  tasks:
  
  - name: install make
    become: yes
    ansible.builtin.apt:
      pkg:
        - make

  - name: Install kubectl
    become: yes
    shell: 
      cmd: snap install kubectl --classic


  - name: Add Anisble user to the docker group
    ansible.builtin.user:
      name: "{{ ansible_user }}"
      groups: "{{ docker_group }}"
      append: yes

    

  - name: Start minikube instance
    register: minikube_info
    shell: |
      minikube delete
      minikube start --install-addons=true
      minikube status

  - name: Version to checkout Init
    set_fact: checkout_version="{{ awx_operator_version }}"
      
  - block: 

      - name: Check latest version
        uri:
          url: "{{ awx_githubapi_url }}"
          return_content: true
        register: awx_latest

      - name: Define version to checkout
        set_fact: checkout_version="{{ awx_latest.json.tag_name }}"

          
        when: awx_operator_version == 'latest'

      - name: Print latest checkout_version variable
        debug:
          msg: "{{ checkout_version }}" 


    
  - name: Git checkout
    ansible.builtin.git:
      repo: '{{ awx_operator_git_link }}'
      dest: "{{ awx_operator_git_name }}/"
      version: "{{ checkout_version }}"
      force: yes

  - name: "Making deploy for AWX"
    ansible.builtin.command: make deploy
    args:
      chdir: "{{ awx_operator_git_name }}/"
    environment:
         NAMESPACE: "{{ awxnamespace }}"

  - name: Rename file 
    ansible.builtin.copy:
      remote_src: true
      src: "{{ awx_operator_git_name }}/{{ awx_demo_config_file }}"
      dest: "{{ awx_operator_git_name }}/{{ awx_config_file }}"

  - name: "Change configuration for {{awx_config_file}}"
    replace:
      path: "{{ awx_operator_git_name }}/{{awx_config_file}}"
      regexp: '(name:\s)(.*)$'
      replace: "name: {{ awxnamespace }}"

  - name: Running AWX
    shell: |
      kubectl config set-context --current --namespace="{{ awxnamespace }}"
      kubectl apply -f "{{ awx_operator_git_name }}/{{ awx_config_file }}"

  - name: Waiting for Operator to start
    shell: kubectl get pods -o json --namespace=ansible-awx --selector control-plane=controller-manager
    register: kubectl_get_pods
    until: kubectl_get_pods.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
    retries: 3
    delay: 90

  - name: Waiting for DB to start
    shell: kubectl get pods -o json --namespace=ansible-awx --selector app.kubernetes.io/component=database
    register: kubectl_get_pods
    until: kubectl_get_pods.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
    retries: 3
    delay: 90

  - name: Waiting for AWX to start
    shell: kubectl get pods -o json --namespace=ansible-awx --selector app.kubernetes.io/name=ansible-awx
    register: kubectl_get_pods
    until: kubectl_get_pods.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
    retries: 5
    delay: 90



  - name: Get user admin password
    shell: kubectl get secret ansible-awx-admin-password -o jsonpath="{.data.password}" | base64 --decode; echo
    register: admin_password



  - name: Creating service for minikube
    become: yes
    template: 
      src: templates/minikube.service.j2
      dest: /etc/systemd/system/minikube.service
    notify: 
      - reload systemctl


  - name: Enable service minikube
    become: yes
    service:
      name: minikube.service
      enabled: yes

  - name: Creating service for minikube forward
    become: yes
    template: 
      src: templates/minikubefwd.service.j2
      dest: /etc/systemd/system/minikubefwd.service
    notify: 
      - reload systemctl


  - name: Enable service minikube fwd
    become: yes
    service:
      name: minikubefwd.service
      enabled: yes
      state: started

  - name: Print admin password
    debug: 
      msg: "Login with username: admin and password: {{admin_password.stdout}} using url http://127.0.0.1:10445"


  handlers:
  - name: reload systemctl
    become: yes
    command: systemctl daemon-reload


      
    